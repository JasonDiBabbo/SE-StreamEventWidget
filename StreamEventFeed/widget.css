/**
 * Global styles
 */

:root {
    /* List UI parameter as CSS variables */

    --fontFamily: {{fontFamily}};
    --fontColor: {{fontColor}};
    --fontSize: {{fontSize}}px;
    --fontWeight: {{fontWeight}};
    --letterSpacing: {{letterSpacing}}px;

    --borderRadius: {{borderRadius}}px;

    --badgeBarHeight: {{badgeBarHeight}}px;

    --badgeWidth: {{badgeWidth}}px;
    --badgeBackgroundColor: {{badgeBackgroundColor}};

    --barWidth: {{barWidth}}px;
    --barBackgroundColor: {{barBackgroundColor}};

    --accentColor: {{accentColor}};

    --dropShadowOffsetX: {{dropShadowOffsetX}}px;
    --dropShadowOffsetY: {{dropShadowOffsetY}}px;
    --dropShadowBlurRadius: {{dropShadowBlurRadius}}px;
    --dropShadowColor: {{dropShadowColor}};

    --eventCycleFadeTime: {{eventCycleFadeTime}}s;
    --eventAlertSlideTime: {{eventAlertSlideTime}}s;
    --eventAlertFadeTime: {{eventAlertFadeTime}}s;
}

html {
    font-family: var(--fontFamily);
    font-size: var(--fontSize);
    font-weight: var(--fontWeight);
    letter-spacing: var(--letterSpacing);
}

.invisible {
    opacity: 0;
}

/**
 * Flex styles
 */

.flex {
    display: flex;
}

.flex.row {
    flex-direction: row;
}

.flex.row-reverse {
    flex-direction: row-reverse;
}

.flex.column {
    flex-direction: column;
}

.flex.column-reverse {
    flex-direction: column-reverse;
}

.flex.align-center {
    align-items: center;
    justify-content: center;
}

/**
 * Container styles
 */

.container {
    /* Center the container relative to the size of the custom widget */

    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/**
 * Slide styles
 */

.slide-frame {
    position: relative;
    overflow: hidden;
}

.slide {
    position: absolute;
    transition: opacity var(--eventCycleFadeTime) linear,
                transform var(--eventAlertSlideTime) ease-out,
                background-color var(--eventAlertFadeTime) linear;

    transform: translateY(0px);
}

.slide.offscreen-top {
    transform: translateY(calc(var(--badgeBarHeight) * -1));
}

.slide.offscreen-bottom {
    transform: translateY(var(--badgeBarHeight));
}

.slide.alert {
    background-color: var(--accentColor);
}

/**
 * Badge & Bar styles
 */

.badge, .bar {
    filter: drop-shadow(var(--dropShadowOffsetX) var(--dropShadowOffsetY) var(--dropShadowBlurRadius) var(--dropShadowColor));
    border-radius: var(--borderRadius);
}

.badge, .badge-item, .badge-item > *, .bar, .bar-item {
    height: var(--badgeBarHeight);
}

/**
 * Badge styles
 */

.badge {
    background-color: var(--badgeBackgroundColor);
}

.badge, .badge-item, .badge-item > * {
    width: var(--badgeWidth);
}

.container.flex.column .badge {
    margin-bottom: 24px;
}

.container.flex.column-reverse .badge {
    margin-top: 24px;
}

.container.flex.row .badge {
    margin-right: 24px;
}

.container.flex.row-reverse .badge {
    margin-left: 24px;
}

/**
 * Bar styles
 */

.bar {
    display: flex;
    align-items: center;
    justify-content: flex-start;

    background-color: var(--barBackgroundColor);
}

.bar, .bar-item {
    width: var(--barWidth);
}

.bar-item {
    /** Flex box with items vertically centered and aligned to the left */

    display: flex;
    align-items: center;
    justify-content: flex-start;

    background-color: transparent;
}

.bar-icon {
    margin: 0px 24px;
}

i.bar-icon {
    flex: none;
    color: var(--accentColor);
    transition: color var(--eventAlertFadeTime) linear;
}

.bar-item.alert i.bar-icon {
    color: #FFFFFF;
}

svg.bar-icon {
    height: 1em;
    width: 1em;
}

svg.bar-icon path {
    transition: fill var(--eventAlertFadeTime) linear;

    fill: var(--accentColor);
}

.bar-item.alert svg.bar-icon path {
    fill: #FFFFFF;
}

.bar-text {
    flex: auto;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-right: 24px;
    color: var(--fontColor);
}